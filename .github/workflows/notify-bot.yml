name: Notify Telegram Bot on Form Response

on:
  push:
    paths:
      - 'responses.json'

jobs:
  notify:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Parse new responses
        id: parse
        run: |
          echo "🔍 Parsing responses.json..."
          
          # Проверяем, что файл существует и не пустой
          if [ ! -f "responses.json" ] || [ ! -s "responses.json" ]; then
            echo "❌ responses.json not found or empty"
            exit 1
          fi
          
          # Показываем содержимое файла для отладки
          echo "📄 Current responses.json content:"
          cat responses.json
          
          # Получаем user_id последнего ответа
          NEW_USER_ID=$(jq -r '.[-1].user_id' responses.json)
          
          # Проверяем, что user_id получен корректно
          if [ "$NEW_USER_ID" = "null" ] || [ -z "$NEW_USER_ID" ]; then
            echo "❌ Could not extract user_id from responses.json"
            echo "📋 Available data:"
            jq '.' responses.json
            exit 1
          fi
          
          echo "user_id=${NEW_USER_ID}" >> $GITHUB_ENV
          echo "✅ Found new response from user: $NEW_USER_ID"

      - name: Check secrets and test bot token
        run: |
          echo "🔧 Checking configuration..."
          echo "📊 Bot token configured: ${{ secrets.TELEGRAM_BOT_TOKEN != '' }}"
          echo "📊 Admin ID configured: ${{ secrets.BOT_ADMIN_ID != '' }}"
          echo "📊 Database URL configured: ${{ secrets.DATABASE_URL != '' }}"
          
          # Тестируем токен бота
          echo "🧪 Testing bot token..."
          TEST_RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getMe")
          echo "🧪 Bot test response: $TEST_RESPONSE"
          
          if echo "$TEST_RESPONSE" | jq -e '.ok == true' > /dev/null; then
            echo "✅ Bot token is valid!"
            BOT_USERNAME=$(echo "$TEST_RESPONSE" | jq -r '.result.username')
            echo "🤖 Bot username: @$BOT_USERNAME"
          else
            echo "❌ Bot token is invalid!"
            exit 1
          fi
        
      - name: Send thank you message to user
        run: |
          echo "📤 Sending thank you message to user ${user_id}..."
          
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"${user_id}\", 
              \"text\": \"✅ Благодарю за заполнение анкеты, твои ответы приняты! Если ты оставил заявку на консультацию, Михаил с тобой свяжется.\"
            }")
          
          echo "📡 User notification response: $RESPONSE"
          
          # Проверяем успешность отправки
          if echo "$RESPONSE" | jq -e '.ok == true' > /dev/null; then
            echo "✅ User notification sent successfully!"
            echo "user_notified=true" >> $GITHUB_ENV
          else
            echo "❌ Failed to send user notification"
            echo "user_notified=false" >> $GITHUB_ENV
            echo "🔍 Error details: $RESPONSE"
          fi

      - name: Send admin info message
        run: |
          echo "📤 Sending admin info message..."
          
          ADMIN_INFO_RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"${{ secrets.BOT_ADMIN_ID }}\", 
              \"text\": \"📋 +1 человек прошел анкету!\\n👤 User ID: ${user_id}\\n✅ База данных обновлена автоматически\"
            }")
          
          echo "📡 Admin info response: $ADMIN_INFO_RESPONSE"
          
          # Проверяем успешность отправки админу
          if echo "$ADMIN_INFO_RESPONSE" | jq -e '.ok == true' > /dev/null; then
            echo "✅ Admin info sent successfully!"
            echo "admin_notified=true" >> $GITHUB_ENV
          else
            echo "❌ Failed to send admin info"
            echo "admin_notified=false" >> $GITHUB_ENV
            echo "🔍 Error details: $ADMIN_INFO_RESPONSE"
          fi

      - name: Install PostgreSQL client
        run: |
          echo "📦 Installing PostgreSQL client..."
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Update database directly
        run: |
          echo "💾 Updating database directly..."
          echo "🔧 User ID: ${user_id}"
          echo "🔧 Database Host: ${{ secrets.DATABASE_HOST }}"
          echo "🔧 Database User: ${{ secrets.DATABASE_USER }}"
          echo "🔧 Database Name: ${{ secrets.DATABASE_NAME }}"
          
          # Обновляем статус complete_quest напрямую в PostgreSQL
          PGPASSWORD="${{ secrets.DATABASE_PASSWORD }}" psql \
            -h "${{ secrets.DATABASE_HOST }}" \
            -p 6543 \
            -U "${{ secrets.DATABASE_USER }}" \
            -d "${{ secrets.DATABASE_NAME }}" \
            -c "UPDATE users SET complete_quest = 'Заполнена' WHERE telegram_id = ${user_id};"
          
          if [ $? -eq 0 ]; then
            echo "✅ Database updated successfully! Set complete_quest = 'Заполнена' for user ${user_id}"
            echo "database_updated=true" >> $GITHUB_ENV
          else
            echo "❌ Failed to update database"
            echo "database_updated=false" >> $GITHUB_ENV
          fi

      - name: Verify database update
        run: |
          echo "🔍 Verifying database update..."
          
          # Проверяем что обновление прошло успешно
          RESULT=$(PGPASSWORD="${{ secrets.DATABASE_PASSWORD }}" psql \
            -h "${{ secrets.DATABASE_HOST }}" \
            -p 6543 \
            -U "${{ secrets.DATABASE_USER }}" \
            -d "${{ secrets.DATABASE_NAME }}" \
            -t -c "SELECT complete_quest FROM users WHERE telegram_id = ${user_id};")
          
          echo "📋 Current complete_quest status for user ${user_id}: $RESULT"
          
          if [[ "$RESULT" == *"Заполнена"* ]]; then
            echo "✅ Database verification successful!"
          else
            echo "⚠️ Database verification failed or status not as expected"
          fi
          
      - name: Final status report
        run: |
          echo "🎯 Final Status Report:"
          echo "👤 User ID: ${user_id}"
          echo "📤 User notified: ${user_notified:-false}"
          echo "👨‍💼 Admin notified: ${admin_notified:-false}"
          echo "💾 Database updated: ${database_updated:-false}"
          
          if [ "${user_notified:-false}" = "true" ] && [ "${admin_notified:-false}" = "true" ] && [ "${database_updated:-false}" = "true" ]; then
            echo "🎉 All operations completed successfully!"
          else
            echo "⚠️ Some operations failed"
            exit 1
          fi 
